if filereadable(expand('~/.vim/autoload/plug.vim'))
    call plug#begin('~/.vim/plugged')

    if $COPILOT !=# ''
        Plug 'github/copilot.vim'
    endif

    Plug 'kien/ctrlp.vim'
    Plug 'junegunn/fzf'
    Plug 'junegunn/fzf.vim'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'Vimjas/vim-python-pep8-indent'

    call plug#end()
endif

syn on
set ai
set ts=4
set sw=4
set expandtab
set smartindent
set hlsearch
set autoread
set ignorecase
set smartcase
set scrolloff=3
set wildignore+=*/log/*,*/scheduler/*,*/target/*
set nofixendofline
set nu

colorscheme industry

" highlight trailing spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

filetype indent on

set runtimepath^=~/.vim/bundle/ctrlp.vim

let mapleader=","

let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

let g:paredit_matchlines = 200


let g:clojure_fuzzy_indent = 1
let g:clojure_fuzzy_indent_patterns = ['fnk$', 'try-let$']

autocmd BufNewFile,BufRead *.edn set filetype=clojure

augroup rainbow_lisp
    autocmd!
    autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

" Save your backup files to a less annoying place than the current directory.
" If you have .vim-backup in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/backup or .
if isdirectory($HOME . '/.vim/backup') == 0
  :silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim/backup/
set backupdir^=./.vim-backup/
set backup

" Save your swap files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
  :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.vim/viminfo

if exists("+undofile")
    " undofile - This allows you to use undos after exiting and restarting
    " This, like swap and backup files, uses .vim-undo first, then ~/.vim/undo
    " :help undo-persistence
    " This is only present in 7.3+
    if isdirectory($HOME . '/.vim/undo') == 0
        :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
    endif
    set undodir=./.vim-undo//
    set undodir+=~/.vim/undo//
    set undofile
endif

" ctrlp setup
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'

" fzf setup
nnoremap <C-p> :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>c :Commands<CR>

" open fzf with preview window by default (requires newer Vim or Neovim)
let g:fzf_layout = { 'down': '~40%' }

" ignore certain directories
"#let g:fzf_files_options = '--exclude node_modules --exclude .git'

if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
